from sys import stdin

#Following is the Node class already written for the Linked List
class Node :
    def __init__(self, data) :
        self.data = data
        self.next = None

def printLL(head):
    while head is not None:
        print(str(head.data) + '_>' ,end='')
        head=head.next
    print('None')
    return

def length(head):
    count=0
    while head is not None:
        count+=1
        head=head.next
    return count

def insertAtI(head,i,data):
    if i<0 and i>length(head):
        return head
    count=0
    prev=None
    curr=head
    while count<i:
        prev=curr
        curr=curr.next
        count=count+1
    newNode=Node(data)  #creating new node for data which we want to insert
    if prev is not None:
        prev.next=newNode
    else:
        head=newNode
    newNode.next=curr

    return head

def takeInput() :
    linkedList=[int(ele) for ele in input().split()]
    head=None
    tail=None
    for data in linkedList:
        if data==-1:
            break
        newNode=Node(data)
        if head is None:
            head=newNode
            tail=newNode
        else:
            tail.next=newNode
            tail=newNode
    return head


head=takeInput()
printLL(head)
head=insertAtI(head,3,11)  #insert at middle
printLL(head)
head=insertAtI(head,0,14)  #insert at start
printLL(head)
head=insertAtI(head,7,19)  #insert at end if the length of output is 5
printLL(head)
