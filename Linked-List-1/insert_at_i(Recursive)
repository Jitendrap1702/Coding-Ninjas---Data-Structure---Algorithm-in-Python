from sys import stdin

#Following is the Node class already written for the Linked List
class Node :
    def __init__(self, data) :
        self.data = data
        self.next = None

def printLL(head):
    while head is not None:
        print(str(head.data) + '_>' ,end='')
        head=head.next
    print('None')
    return

def length(head):
    count=0
    while head is not None:
        count+=1
        head=head.next
    return count

def insertAtIRecursive(head,i,data):
    if i<0:
        return head
    
    if i==0:
        newNode=Node(data)
        newNode.next=head
        return newNode

    if head is None:
        return None

    smallHead=insertAtIRecursive(head.next,i-1,data)
    head.next=smallHead
    return head

def takeInput() :
    linkedList=[int(ele) for ele in input().split()]
    head=None
    tail=None
    for data in linkedList:
        if data==-1:
            break
        newNode=Node(data)
        if head is None:
            head=newNode
            tail=newNode
        else:
            tail.next=newNode
            tail=newNode
    return head


head=takeInput()
printLL(head)
head=insertAtIRecursive(head,3,11)  #insert at middle
printLL(head)
head=insertAtIRecursive(head,0,14)  #insert at start
printLL(head)
head=insertAtIRecursive(head,7,19)  #insert at end if the length of output is 5
printLL(head)
