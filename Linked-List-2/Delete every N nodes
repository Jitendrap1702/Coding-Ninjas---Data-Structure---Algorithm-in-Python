#time complexity is O(n) and space complexity is O(1)

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
def skipMdeleteN(head, m, n): 
    curr = head 
          
    # The main loop that traverses through the 
    # whole list 
    while(curr): 
        # Skip M nodes
        if m==0:
            return
        if n==0:
            return head 
        for count in range(1, m): 
            if curr is None: 
                return 
            curr = curr.next
                      
        if curr is None : 
            return 
  
        # Start from next node and delete N nodes 
        t = curr.next 
        for count in range(1, n+1): 
            if t is None: 
                break
            t = t.next
      
        # Link the previous list with reamining nodes 
        curr.next = t 
        # Set Current pointer for next iteration 
        curr = t

    return head  
            
	
def ll(arr):
    if len(arr)==0:
        return None
    head = Node(arr[0])
    last = head
    for data in arr[1:]:
        last.next = Node(data)
        last = last.next
    return head

def printll(head):
    while head:
        print(head.data, end=' ')
        head = head.next
    print()

# Main
# Read the link list elements including -1
arr=list(int(i) for i in input().strip().split(' '))
# Create a Linked list after removing -1 from list
l = ll(arr[:-1])
m=int(input())
n=int(input())
l = skipMdeleteN(l, m, n)
printll(l) 
